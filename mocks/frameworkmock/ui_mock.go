// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/snyk/go-application-framework/pkg/ui (interfaces: UserInterface,ProgressBar)
//
// Generated by this command:
//
//	mockgen -package frameworkmock -destination frameworkmock/ui_mock.go github.com/snyk/go-application-framework/pkg/ui UserInterface,ProgressBar
//

// Package frameworkmock is a generated GoMock package.
package frameworkmock

import (
	reflect "reflect"

	ui "github.com/snyk/go-application-framework/pkg/ui"
	gomock "go.uber.org/mock/gomock"
)

// MockUserInterface is a mock of UserInterface interface.
type MockUserInterface struct {
	ctrl     *gomock.Controller
	recorder *MockUserInterfaceMockRecorder
	isgomock struct{}
}

// MockUserInterfaceMockRecorder is the mock recorder for MockUserInterface.
type MockUserInterfaceMockRecorder struct {
	mock *MockUserInterface
}

// NewMockUserInterface creates a new mock instance.
func NewMockUserInterface(ctrl *gomock.Controller) *MockUserInterface {
	mock := &MockUserInterface{ctrl: ctrl}
	mock.recorder = &MockUserInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserInterface) EXPECT() *MockUserInterfaceMockRecorder {
	return m.recorder
}

// Input mocks base method.
func (m *MockUserInterface) Input(prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Input", prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Input indicates an expected call of Input.
func (mr *MockUserInterfaceMockRecorder) Input(prompt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Input", reflect.TypeOf((*MockUserInterface)(nil).Input), prompt)
}

// NewProgressBar mocks base method.
func (m *MockUserInterface) NewProgressBar() ui.ProgressBar {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewProgressBar")
	ret0, _ := ret[0].(ui.ProgressBar)
	return ret0
}

// NewProgressBar indicates an expected call of NewProgressBar.
func (mr *MockUserInterfaceMockRecorder) NewProgressBar() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProgressBar", reflect.TypeOf((*MockUserInterface)(nil).NewProgressBar))
}

// Output mocks base method.
func (m *MockUserInterface) Output(output string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", output)
	ret0, _ := ret[0].(error)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockUserInterfaceMockRecorder) Output(output any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockUserInterface)(nil).Output), output)
}

// OutputError mocks base method.
func (m *MockUserInterface) OutputError(err error, opts ...ui.Opts) error {
	m.ctrl.T.Helper()
	varargs := []any{err}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OutputError", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// OutputError indicates an expected call of OutputError.
func (mr *MockUserInterfaceMockRecorder) OutputError(err any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{err}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputError", reflect.TypeOf((*MockUserInterface)(nil).OutputError), varargs...)
}

// MockProgressBar is a mock of ProgressBar interface.
type MockProgressBar struct {
	ctrl     *gomock.Controller
	recorder *MockProgressBarMockRecorder
	isgomock struct{}
}

// MockProgressBarMockRecorder is the mock recorder for MockProgressBar.
type MockProgressBarMockRecorder struct {
	mock *MockProgressBar
}

// NewMockProgressBar creates a new mock instance.
func NewMockProgressBar(ctrl *gomock.Controller) *MockProgressBar {
	mock := &MockProgressBar{ctrl: ctrl}
	mock.recorder = &MockProgressBarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProgressBar) EXPECT() *MockProgressBarMockRecorder {
	return m.recorder
}

// Clear mocks base method.
func (m *MockProgressBar) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear.
func (mr *MockProgressBarMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockProgressBar)(nil).Clear))
}

// SetTitle mocks base method.
func (m *MockProgressBar) SetTitle(title string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTitle", title)
}

// SetTitle indicates an expected call of SetTitle.
func (mr *MockProgressBarMockRecorder) SetTitle(title any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTitle", reflect.TypeOf((*MockProgressBar)(nil).SetTitle), title)
}

// UpdateProgress mocks base method.
func (m *MockProgressBar) UpdateProgress(progress float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProgress", progress)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProgress indicates an expected call of UpdateProgress.
func (mr *MockProgressBarMockRecorder) UpdateProgress(progress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProgress", reflect.TypeOf((*MockProgressBar)(nil).UpdateProgress), progress)
}
