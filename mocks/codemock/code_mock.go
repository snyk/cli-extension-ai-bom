// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/snyk/cli-extension-ai-bom/internal/services/code (interfaces: CodeService)
//
// Generated by this command:
//
//	mockgen -package codemock -destination codemock/code_mock.go github.com/snyk/cli-extension-ai-bom/internal/services/code CodeService
//

// Package codemock is a generated GoMock package.
package codemock

import (
	reflect "reflect"

	zerolog "github.com/rs/zerolog"
	errors "github.com/snyk/cli-extension-ai-bom/internal/errors"
	http "github.com/snyk/code-client-go/http"
	configuration "github.com/snyk/go-application-framework/pkg/configuration"
	ui "github.com/snyk/go-application-framework/pkg/ui"
	gomock "go.uber.org/mock/gomock"
)

// MockCodeService is a mock of CodeService interface.
type MockCodeService struct {
	ctrl     *gomock.Controller
	recorder *MockCodeServiceMockRecorder
	isgomock struct{}
}

// MockCodeServiceMockRecorder is the mock recorder for MockCodeService.
type MockCodeServiceMockRecorder struct {
	mock *MockCodeService
}

// NewMockCodeService creates a new mock instance.
func NewMockCodeService(ctrl *gomock.Controller) *MockCodeService {
	mock := &MockCodeService{ctrl: ctrl}
	mock.recorder = &MockCodeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCodeService) EXPECT() *MockCodeServiceMockRecorder {
	return m.recorder
}

// UploadBundle mocks base method.
func (m *MockCodeService) UploadBundle(path string, depgraphs map[string][]byte, httpClient http.HTTPClient, logger *zerolog.Logger, config configuration.Configuration, userInterface ui.UserInterface) (string, *errors.AiBomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UploadBundle", path, depgraphs, httpClient, logger, config, userInterface)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*errors.AiBomError)
	return ret0, ret1
}

// UploadBundle indicates an expected call of UploadBundle.
func (mr *MockCodeServiceMockRecorder) UploadBundle(path, depgraphs, httpClient, logger, config, userInterface any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UploadBundle", reflect.TypeOf((*MockCodeService)(nil).UploadBundle), path, depgraphs, httpClient, logger, config, userInterface)
}
