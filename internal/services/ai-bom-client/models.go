// Package aibomclient provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package aibomclient

import (
	"encoding/json"
	"errors"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for FileBundleStoreDataType.
const (
	FileBundleStoreDataTypeAiBomFileBundle FileBundleStoreDataType = "ai_bom_file_bundle"
)

// Defines values for GetAiBomResponseDataType.
const (
	GetAiBomResponseDataTypeAiBom GetAiBomResponseDataType = "ai_bom"
)

// Defines values for JobDataType.
const (
	JobDataTypeAiBomJob JobDataType = "ai_bom_job"
)

// Defines values for JobState.
const (
	JobStateErrored    JobState = "errored"
	JobStateFinished   JobState = "finished"
	JobStateProcessing JobState = "processing"
)

// Defines values for SCMBundleStoreDataType.
const (
	SCMBundleStoreDataTypeAiBomScmBundle SCMBundleStoreDataType = "ai_bom_scm_bundle"
)

// ActualVersion Resolved API version
type ActualVersion = string

// AiBomAttributes The AI-Bom document
type AiBomAttributes map[string]interface{}

// CreateAiBomRequestBody defines model for CreateAiBomRequestBody.
type CreateAiBomRequestBody struct {
	Data CreateAiBomRequestData `json:"data"`
}

// CreateAiBomRequestData defines model for CreateAiBomRequestData.
type CreateAiBomRequestData struct {
	union json.RawMessage
}

// CreateAiBomResponseBody defines model for CreateAiBomResponseBody.
type CreateAiBomResponseBody struct {
	Data    JobData        `json:"data"`
	Jsonapi JsonApi        `json:"jsonapi"`
	Links   PaginatedLinks `json:"links"`
}

// Error defines model for Error.
type Error struct {
	// Code An application-specific error code, expressed as a string value.
	Code *string `json:"code,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Id A unique identifier for this particular occurrence of the problem.
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Links A link that leads to further details about this particular occurrence of the problem.
	Links  *ErrorLink              `json:"links,omitempty"`
	Meta   *map[string]interface{} `json:"meta,omitempty"`
	Source *struct {
		// Parameter A string indicating which URI query parameter caused the error.
		Parameter *string `json:"parameter,omitempty"`

		// Pointer A JSON Pointer [RFC6901] to the associated entity in the request document.
		Pointer *string `json:"pointer,omitempty"`
	} `json:"source,omitempty"`

	// Status The HTTP status code applicable to this problem, expressed as a string value.
	Status string `json:"status"`

	// Title A short, human-readable summary of the problem that SHOULD NOT change from occurrence to occurrence of the problem, except for purposes of localization.
	Title *string `json:"title,omitempty"`
}

// ErrorDocument defines model for ErrorDocument.
type ErrorDocument struct {
	Errors  []Error `json:"errors"`
	Jsonapi JsonApi `json:"jsonapi"`
}

// ErrorLink A link that leads to further details about this particular occurrence of the problem.
type ErrorLink struct {
	About *LinkProperty `json:"about,omitempty"`
}

// FileBundleStoreAttributes defines model for FileBundleStoreAttributes.
type FileBundleStoreAttributes struct {
	// BundleId The id of the bundle that has been uploaded by the user, sha256 hash
	BundleId string `json:"bundle_id"`
}

// FileBundleStoreData defines model for FileBundleStoreData.
type FileBundleStoreData struct {
	Attributes FileBundleStoreAttributes `json:"attributes"`
	Type       FileBundleStoreDataType   `json:"type"`
}

// FileBundleStoreDataType defines model for FileBundleStoreData.Type.
type FileBundleStoreDataType string

// GetAiBomResponseBody defines model for GetAiBomResponseBody.
type GetAiBomResponseBody struct {
	Data    GetAiBomResponseData `json:"data"`
	Jsonapi JsonApi              `json:"jsonapi"`
	Links   PaginatedLinks       `json:"links"`
}

// GetAiBomResponseData defines model for GetAiBomResponseData.
type GetAiBomResponseData struct {
	// Attributes The AI-Bom document
	Attributes AiBomAttributes          `json:"attributes"`
	Id         openapi_types.UUID       `json:"id"`
	Type       GetAiBomResponseDataType `json:"type"`
}

// GetAiBomResponseDataType defines model for GetAiBomResponseData.Type.
type GetAiBomResponseDataType string

// GetAiBomResponseJobBody defines model for GetAiBomResponseJobBody.
type GetAiBomResponseJobBody struct {
	Data    JobData        `json:"data"`
	Jsonapi JsonApi        `json:"jsonapi"`
	Links   PaginatedLinks `json:"links"`
}

// JobAttributes JobAttributes represents the attributes of a Job resource
type JobAttributes struct {
	// Status State of the job.
	Status JobState `json:"status"`
}

// JobData defines model for JobData.
type JobData struct {
	// Attributes JobAttributes represents the attributes of a Job resource
	Attributes    JobAttributes         `json:"attributes"`
	Id            openapi_types.UUID    `json:"id"`
	Relationships *JobDataRelationships `json:"relationships,omitempty"`
	Type          JobDataType           `json:"type"`
}

// JobDataType defines model for JobData.Type.
type JobDataType string

// JobDataRelationships defines model for JobDataRelationships.
type JobDataRelationships struct {
	AiBom RelationshipObjectToOne `json:"ai_bom"`
}

// JobState State of the job.
type JobState string

// JsonApi defines model for JsonApi.
type JsonApi struct {
	// Version Version of the JSON API specification this server supports.
	Version string `json:"version"`
}

// LinkProperty defines model for LinkProperty.
type LinkProperty struct {
	union json.RawMessage
}

// LinkProperty0 A string containing the link’s URL.
type LinkProperty0 = string

// LinkProperty1 defines model for .
type LinkProperty1 struct {
	// Href A string containing the link’s URL.
	Href string `json:"href"`

	// Meta Free-form object that may contain non-standard information.
	Meta *Meta `json:"meta,omitempty"`
}

// Meta Free-form object that may contain non-standard information.
type Meta map[string]interface{}

// PaginatedLinks defines model for PaginatedLinks.
type PaginatedLinks struct {
	First *LinkProperty `json:"first,omitempty"`
	Last  *LinkProperty `json:"last,omitempty"`
	Next  *LinkProperty `json:"next,omitempty"`
	Prev  *LinkProperty `json:"prev,omitempty"`
	Self  *LinkProperty `json:"self,omitempty"`
}

// QueryVersion Requested API version
type QueryVersion = string

// RelationshipObjectToOne defines model for RelationshipObjectToOne.
type RelationshipObjectToOne struct {
	Data RelationshipObjectToOneData `json:"data"`
}

// RelationshipObjectToOneData defines model for RelationshipObjectToOneData.
type RelationshipObjectToOneData struct {
	Id   openapi_types.UUID `json:"id"`
	Type string             `json:"type"`
}

// SCMBundleStoreAttributes defines model for SCMBundleStoreAttributes.
type SCMBundleStoreAttributes struct {
	TargetId openapi_types.UUID `json:"target_id"`

	// TargetVersion The branch or commit hash to scan
	TargetVersion *string `json:"target_version,omitempty"`
}

// SCMBundleStoreData defines model for SCMBundleStoreData.
type SCMBundleStoreData struct {
	Attributes SCMBundleStoreAttributes `json:"attributes"`
	Type       SCMBundleStoreDataType   `json:"type"`
}

// SCMBundleStoreDataType defines model for SCMBundleStoreData.Type.
type SCMBundleStoreDataType string

// AiBomIdParam defines model for AiBomIdParam.
type AiBomIdParam = openapi_types.UUID

// JobIdParam defines model for JobIdParam.
type JobIdParam = openapi_types.UUID

// OrgIdParam defines model for OrgIdParam.
type OrgIdParam = openapi_types.UUID

// Version Requested API version
type Version = QueryVersion

// N400 defines model for 400.
type N400 = ErrorDocument

// N401 defines model for 401.
type N401 = ErrorDocument

// N404 defines model for 404.
type N404 = ErrorDocument

// N500 defines model for 500.
type N500 = ErrorDocument

// GetAiBomJobParams defines parameters for GetAiBomJob.
type GetAiBomJobParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`
}

// CreateAiBomParams defines parameters for CreateAiBom.
type CreateAiBomParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`
}

// GetAiBomParams defines parameters for GetAiBom.
type GetAiBomParams struct {
	// Version The requested version of the endpoint to process the request
	Version Version `form:"version" json:"version"`
}

// CreateAiBomApplicationVndAPIPlusJSONRequestBody defines body for CreateAiBom for application/vnd.api+json ContentType.
type CreateAiBomApplicationVndAPIPlusJSONRequestBody = CreateAiBomRequestBody

// AsFileBundleStoreData returns the union data inside the CreateAiBomRequestData as a FileBundleStoreData
func (t CreateAiBomRequestData) AsFileBundleStoreData() (FileBundleStoreData, error) {
	var body FileBundleStoreData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromFileBundleStoreData overwrites any union data inside the CreateAiBomRequestData as the provided FileBundleStoreData
func (t *CreateAiBomRequestData) FromFileBundleStoreData(v FileBundleStoreData) error {
	v.Type = "ai_bom_file_bundle"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeFileBundleStoreData performs a merge with any union data inside the CreateAiBomRequestData, using the provided FileBundleStoreData
func (t *CreateAiBomRequestData) MergeFileBundleStoreData(v FileBundleStoreData) error {
	v.Type = "ai_bom_file_bundle"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsSCMBundleStoreData returns the union data inside the CreateAiBomRequestData as a SCMBundleStoreData
func (t CreateAiBomRequestData) AsSCMBundleStoreData() (SCMBundleStoreData, error) {
	var body SCMBundleStoreData
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromSCMBundleStoreData overwrites any union data inside the CreateAiBomRequestData as the provided SCMBundleStoreData
func (t *CreateAiBomRequestData) FromSCMBundleStoreData(v SCMBundleStoreData) error {
	v.Type = "ai_bom_scm_bundle"
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeSCMBundleStoreData performs a merge with any union data inside the CreateAiBomRequestData, using the provided SCMBundleStoreData
func (t *CreateAiBomRequestData) MergeSCMBundleStoreData(v SCMBundleStoreData) error {
	v.Type = "ai_bom_scm_bundle"
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t CreateAiBomRequestData) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"type"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t CreateAiBomRequestData) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "ai_bom_file_bundle":
		return t.AsFileBundleStoreData()
	case "ai_bom_scm_bundle":
		return t.AsSCMBundleStoreData()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t CreateAiBomRequestData) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *CreateAiBomRequestData) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLinkProperty0 returns the union data inside the LinkProperty as a LinkProperty0
func (t LinkProperty) AsLinkProperty0() (LinkProperty0, error) {
	var body LinkProperty0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkProperty0 overwrites any union data inside the LinkProperty as the provided LinkProperty0
func (t *LinkProperty) FromLinkProperty0(v LinkProperty0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkProperty0 performs a merge with any union data inside the LinkProperty, using the provided LinkProperty0
func (t *LinkProperty) MergeLinkProperty0(v LinkProperty0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinkProperty1 returns the union data inside the LinkProperty as a LinkProperty1
func (t LinkProperty) AsLinkProperty1() (LinkProperty1, error) {
	var body LinkProperty1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkProperty1 overwrites any union data inside the LinkProperty as the provided LinkProperty1
func (t *LinkProperty) FromLinkProperty1(v LinkProperty1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkProperty1 performs a merge with any union data inside the LinkProperty, using the provided LinkProperty1
func (t *LinkProperty) MergeLinkProperty1(v LinkProperty1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t LinkProperty) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LinkProperty) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
